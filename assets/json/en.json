{
    "home": "Home",
    "about": "About",
    "projects": "Projects",
    "downloadCv": "Download CV",
    "contact": "Contact",
    "more": "More...",
    "aboutText": "I graduated with a BA in Computer Systems in 2010. I worked for four years as a Technical Support Officer in Syria before emigrating. I am passionate about programming and learned several programming languages at university, including C, C++, C#, and Java. After moving to Germany, I took courses in Web Development and Java Development. Now, I can describe myself as a Junior MERN-stack / Java Software Developer.",
    "getToKnow": "Get to know me!",
    "getToKnowMeText": "Hey! It's <strong>Alan Miste/Hassan</strong> and I'm a <strong> Frontend/MERN-Stack Web Developer </strong> ,<strong> Java Software Developer </strong> located in Germany. During the period of further education <strong>(Weiterbildung)</strong> within the <strong> web development course and Java-Sowftware development </strong>, I completed several projects were as a training, in which web development techniques were used, whether for the <strong>front-end</strong> or <strong>back-end</strong>. </p> <p class='about__content-details-para'> I'm a bit of a digital product geek. Over the years, I've used hundreds of web and mobile apps. I'm passionate about programming and coding. I also have hobbies in designing and editing photos, in addition to some other hobbies outside the technical field. I am also interested in astronomy. Feel free to <strong>contact</strong> me here.",
    "mySkills": "My Skills",
    "projectsText": "These are some of my projects that I worked on to increase my experience.",
    "SpaceGeeksCornerHome": "It is an application that allows viewing of various images fetched from NASA via its API. The logged in user can add photos to his favourites or delete them if he no longer wants them. He can also create T-shirts Mockup from the photos he likes with just one click!",
    "SpaceGeeksCornerText": "<p class='project-details__desc-para'><strong>Why?</strong><br />In my free time I design photos, and sometimes the design takesa long time, so I always wished it would be easier. Hence theidea to create an application that creates designs in the fewest steps possible, and I don't think there is less than one click. And since I'm a space geek, I couldn't find a better than space photo to be the hero of this app.</p><p class='project-details__desc-para'><strong>What?!</strong><br />It is an application that allows viewing of various images fetched from NASA via its API. The logged in user can add photos to his favourites or delete them if he no longer wants them. Hecan also create T-shirts Mockup from the photos he likes with just one click!</p><p class='project-details__desc-para'><strong>How?!</strong><br />Using the following techniques I was able to create this application:</p>",
    "reduxShoppingCartHome": "Redux Shopping Cart is a simple Web App, it was just to apply what I learned about Redux Toolkit.",
    "reduxShoppingCartText": "Redux Shopping Cart is a simple web application, and may be it is traditional too.<br />This project may be small and the data that needs to be passed through the components does not need Redux to be transferred, but my goal was to practice using the Redux Toolkit.",
    "amBlogHome": "AM Blog is a simple blogs site, consisting of a 'Blogs' page to display all posts, an 'About' page, and 'New Blog' page to add new posts if the user is logged in. I created a simple sign up and sign in pages, and for authentication I used JWT (JSON Web Tokens). The logged in user can delete there own blogs individually.",
    "todoJavaAppHome": "Todo-App is a simple application, consisting of a field for entering tasks and three sections for each case, Open, In progress and Done. In addition to a Nav bar.",
    "cookbookHome": "A Cookbook site is a simple site for displaying cooking recipes. I coded it completely (front-end and back-end).",
    "todoListHome": " Todo list app for writing daily tasks. Use your browser to record your daily tasks instead of pen and paper.",
    "emailMeText": "Feel free to email me!",
    "clickToCopy": "Click to copy",
    "defualtEmailApp": "open defualt Email app",
    "javaMernFooter": "Java-Software / MERN-Stack Developer",
    "followMe": "Follow Me on:",
    "projectOverview": "Project Overview",
    "toolsUsed": "Tools Used",
    "seeLive": "See Live",
    "seeLiveText": "I initially deployed the project on Heroku's free hosting plan. However, recently, the free plan has been discontinued. In response to their notification about the cancellation of the free plan, I created a presentation video showcasing the app's functionality and appearance.<br />This video serves as a temporary solution, allowing visitors to quickly view and experience the app without the need to clone the repository or install any libraries.",
    "goToVideo": "Go to video",
    "amBlogText": "<p class='project-details__desc-para'><b>AM Blog</b> is a simple blogs site, consisting of a '<b>Blogs</b>' page to display all posts, an '<b>About</b>' page, and '<b>New Blog</b>' page to add new posts if the user is logged in. I created a simple sign up and sign in pages, and for authentication I used <b>JWT</b> (JSON Web Tokens). The logged in user can delete there own blogs individually.<br /><br /> I used <b>Node.js</b> with <b>Express</b> framework to mange routing, requests, server-side logic and responses.<br /><i> You can find more information about <b>Express</b><a style='color: blue' href='https://expressjs.com' target='_blank'>here</a>. </i><br /></p><p class='project-details__desc-para'>To output the dynamic data that come from database I used a view engine<b> EJS </b></p><p class='project-details__desc-para'><b>EJS :</b><i> Embedded JavaScript templating</i><br /><b> - How dose EJS work? </b><br />The view files live on the server and we want to render one through the browser that view file is passed into the EJS view engine to be processed, the engine looks for any kind of dynamic content, variables, loops... etc.<br />Then whenever it finds those it figures out the resulting HTML code for those parts and in the end it spits out a valid HTML page based on the template we wrote and then the HTML page with the resulting data inside it will be returned to the browser, and this whole process is called <b> server-side </b>rendering.<br /><i> You can find more information about<b> EJS </b><a style='color: blue' href='https://ejs.co'>here</a>.</i></p><p class='project-details__desc-para'><b>Database :</b><br />I used <b>MongoDB</b> to handle data, with <b>Mongoose</b> I created a Schema for the blogs, it's simple, consisting of:<br />title, snippet and body, with a JSON object timestamps <i>-generated and saved automatically in the database-</i> to sort blogs by creation date.</p><p class='project-details__desc-para'><b>MVC :</b><br />approach It stands for <b>Model</b>, <b>View</b>,<b>Controller</b>. It's a method of structuring the code and files to make the code more modular, reusable and easier to maintain.<br /><br /><b>Models</b> are how to describe the data structure and use them to interact with the database.<br /> <b>Views</b> are how to make HTML templates that the a user will see.<br /><b>Controllers</b> is the thing that forms the link between models and views, it use models to get data and then pass that data into a view.<br />The idea behinde this approach is to make the code easier to manage and to undestand, so I splitted the code into different areas of files and then each area of file has its own job todo, so the route file matches incoming requests and it passesthose requests to the correct controller function. Acontroller communicates with the appropriate model to get dtatinto a view, then the view renders that data into it's template and it get sent to the browser.<p class='project-details__desc-para'> <b> Authentication and validation :</b><br /> for user registration, login and proper data entry verification process I used:<br /><br /> <b>- JWT</b><br /><i>JSON Web Token</i> is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally  JWTs can be signed using a secret (with the HMAC algorithm) or a  private key pair using RSA or ECDSA.<br /><i>You can find  about <b> JWT </b><a style='color: blue' href='https://jwt.io/'>here</a i><br /><br /><b>- Validator:</b><br /> It is a third-party validation package, this package has different functions inside it that we can use to validate differnt things and one of those things is to validate an E-mail. I used '<i>isEmail</i> ' instead of creating my own function to validate the E-mail.<br /><i>You can find more information about <b> Validator </b><a style='color: blue' href='https://www.npmjs.com/package/validator'>here</a>.</i></p>",
    "cookbookText": "<p class='project-details__desc-para'>The Cookbook is a simple site for displaying cooking recipes. It was the final project that I submitted in the Full-Stack development Course at Coding School. The main goal of the project is to apply as much of the skills I have learned during the course.</p><p class='project-details__desc-para'>I started with this project from scratch, and since I worked on it over several days for few hours each day, I created cards via Trello, to divide and organize tasks, to know what was needed in the next step and what was done, in other words, to organize the work. I created a wireframe for the project with some initial images and the project's logo, and started coding. I coded both, the frontend and the backend.</p>",
    "todoJavaAppText": "<p class='project-details__desc-para'>Todo-App is a simple application, consisting of a field for entering tasks and three sections for each case, Open, In progress and Done. In addition to a Nav bar. Entered tasks are 'Open' by default. The task will be listed in the 'Open' menu, for each task there will be three buttons: Delete, Edit and Advance.</p><ul class='project-details__desc-para'><li>- Delete: to delete the task.</li><li>- Edit: to move the task between the three lists.</li><li>- Advance : to pass the task to the next list.</li></ul><p class='project-details__desc-para'><strong>I haven't linked the app to a database, so the entries remain until the session is terminated.</strong></p>",
    "todoListText": "<p class='project-details__desc-para'>Todo list app is a light, fast and easy application to record daily tasks on the mobile through the browser instead of using a pen and paper. I used HTML and CSS to build the application architecture, and JavaScript for functionality. The entries are stored in the browser's local storage using JSON format.</p><p class='project-details__desc-para'>The data remains visible on the page as long as it is not cleared from the browser's local storage, either through browser settings or through the application itself. There is an option to delete the tasks individually or collectively when they are completed. There is also an option to edit.</p>"
}
