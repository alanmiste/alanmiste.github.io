{
    "home": "Startseite",
    "about": "Über mich",
    "projects": "Projekte",
    "downloadCv": "Lebenslauf herunterladen",
    "contact": "Kontakt",
    "more": "Mehr...",
    "aboutText":"Ich habe 2010 meinen Bachelor-Abschluss in Computer Systems gemacht. Ich arbeitete vier Jahre lang als Technischer Support-Mitarbeiter in Syrien, bevor ich emigrierte. Ich habe eine Leidenschaft für Programmierung und habe an der Universität mehrere Programmiersprachen gelernt, darunter C, C++, C# und Java. Nach meinem Umzug nach Deutschland habe ich Kurse in Webentwicklung und Java-Entwicklung besucht. Jetzt kann ich mich als Junior MERN-Stack / Java-Softwareentwickler beschreiben.",
    "getToKnow":"Lernen Sie mich kennen!",
    "getToKnowMeText": "Hallo! Ich bin <strong>Alan Miste/Hassan</strong> ein <strong> Full-Stack Webentwickler </strong>/<strong> Java-Softwareentwickler</strong>. Während meiner <strong>(Weiterbildung)</strong> in der <strong>  Webentwicklung und Java-Softwareentwicklung </strong>habe ich mehrere Projekte als Übung abgeschlossen, bei denen sowohl <strong>front-end</strong> als auch <strong>back-end</strong> Webentwicklungstechniken verwendet wurden.</p> <p class='about__content-details-para'> Ich bin ein kleiner Technikfreak und habe im Laufe der Jahre Hunderte von Web- und mobilen Apps benutzt. Ich habe eine Leidenschaft für Programmierung und Codierung. Außerdem habe ich Hobbys im Bereich Design und Fotobearbeitung sowie einige andere Hobbys außerhalb des technischen Bereichs. Ich interessiere mich auch für Astronomie. Zögern Sie nicht, mich hier zu <strong>kontaktieren</strong>.",
    "mySkills": "Meine Fähigkeiten",
    "projectsText": "Dies sind einige meiner Projekte, an denen ich gearbeitet habe, um meine Erfahrungen zu erweitern.",
    "SpaceGeeksCornerHome": "Es ist eine Anwendung, die das Anzeigen verschiedener Bilder ermöglicht, die über die API von der NASA abgerufen werden. Der eingeloggte Benutzer kann Fotos zu seinen Favoriten hinzufügen oder löschen, wenn er sie nicht mehr möchte. Er kann auch T-Shirt-Mockups aus den Fotos erstellen, die ihm gefallen, und das mit nur einem Klick!",
    "SpaceGeeksCornerText": "<p class='project-details__desc-para'><strong>Warum?</strong><br />In meiner Freizeit entwerfe ich Fotos, und manchmal dauert das Designen lange, daher wünschte ich mir immer, es wäre einfacher. So entstand die Idee, eine Anwendung zu erstellen, die Designs mit den geringstmöglichen Schritten erstellt, und ich denke, weniger als ein Klick ist nicht möglich. Da ich ein Weltraum-Fan bin, konnte ich kein besseres Thema als Weltraumbilder finden, um der Held dieser App zu sein.</p><p class='project-details__desc-para'><strong>Was?!</strong><br />Es ist eine Anwendung, die das Anzeigen verschiedener Bilder ermöglicht, die über die API von der NASA abgerufen werden. Der eingeloggte Benutzer kann Fotos zu seinen Favoriten hinzufügen oder löschen, wenn er sie nicht mehr möchte. Er kann auch T-Shirt-Mockups aus den Fotos erstellen, die ihm gefallen, und das mit nur einem Klick!</p><p class='project-details__desc-para'><strong>Wie?!</strong><br />Mit den folgenden Techniken konnte ich diese Anwendung erstellen:</p>",
    "reduxShoppingCartHome": "Der Redux Shopping Cart ist eine einfache Web-App, die ich erstellt habe, um das Gelernte über das Redux Toolkit anzuwenden.",
    "reduxShoppingCartText": "Redux Shopping Cart ist eine einfache Webanwendung und vielleicht auch traditionell.<br /> Dieses Projekt ist möglicherweise klein und die Daten, die durch die Komponenten übergeben werden müssen, benötigen nicht unbedingt Redux, aber mein Ziel war es, die Verwendung des Redux Toolkits zu üben.",
    "amBlogHome": "AM Blog ist eine einfache Blogseite, die aus einer 'Blogs'-Seite zur Anzeige aller Beiträge, einer 'Über'-Seite und einer 'Neuer Blog'-Seite besteht, auf der neue Beiträge hinzugefügt werden können, wenn der Benutzer eingeloggt ist. Ich habe einfache Anmelde- und Registrierungsseiten erstellt und zur Authentifizierung JWT (JSON Web Tokens) verwendet. Der eingeloggte Benutzer kann seine eigenen Blogs einzeln löschen.",
    "todoJavaAppHome": "Die Todo-App ist eine einfache Anwendung, die aus einem Feld zum Eingeben von Aufgaben und drei Abschnitten für jeden Status besteht: Offen, In Bearbeitung und Erledigt. Zusätzlich gibt es eine Navigationsleiste.",
    "cookbookHome": "Eine Kochbuch-Website ist eine einfache Seite zur Anzeige von Kochrezepten. Ich habe sie vollständig selbst programmiert (Front-End und Back-End).",
    "todoListHome": "Todo-Listen-App zum Schreiben täglicher Aufgaben. Verwenden Sie Ihren Browser, um Ihre täglichen Aufgaben anstelle von Stift und Papier zu erfassen.",
    "emailMeText": "Schreiben Sie mir gerne eine E-Mail!",
    "clickToCopy": "Zum Kopieren klicken",
    "defualtEmailApp": "Standard E-Mail-App öffnen",
    "javaMernFooter": "Java-Software / MERN-Stack-Entwickler",
    "followMe": "Folgen Sie mir auf:",
    "projectOverview": "Projektübersicht",
    "toolsUsed": "Verwendete Technologien",
    "seeLive": "Live ansehen",
    "seeLiveText": "Zunächst habe ich das Projekt auf Herokus kostenlosem Hosting-Plan bereitgestellt. Allerdings wurde der kostenlose Plan vor Kurzem eingestellt. Als Reaktion auf die Benachrichtigung über die Einstellung des kostenlosen Plans habe ich ein Präsentationsvideo erstellt, das die Funktionalität und das Erscheinungsbild der App zeigt.<br />Dieses Video dient als vorübergehende Lösung, damit Besucher die App schnell sehen und erleben können, ohne das Repository zu klonen oder Bibliotheken zu installieren.",
    "goToVideo": "Zum Video gehen",
    "amBlogText": "<p class='project-details__desc-para'> <b>AM Blog</b> ist eine einfache Blog-Seite, die aus einer '<b>Blogs</b>'-Seite zur Anzeige aller Beiträge, einer '<b>Über</b>'-Seite und einer '<b>Neuer Blog</b>'-Seite besteht, auf der neue Beiträge hinzugefügt werden können, wenn der Benutzer eingeloggt ist. Ich habe einfache Anmelde- und Registrierungsseiten erstellt und zur Authentifizierung <b>JWT</b> (JSON Web Tokens) verwendet. Der eingeloggte Benutzer kann seine eigenen Blogs einzeln löschen. <br /><br /> Ich habe <b>Node.js</b> mit dem <b>Express</b>-Framework verwendet, um das Routing, Anfragen, die serverseitige Logik und die Antworten zu verwalten. <br /> <i> Weitere Informationen über <b>Express</b> finden Sie <a style='color: blue' href='https://expressjs.com' target='_blank'>hier</a>. </i> <br /></p><p class='project-details__desc-para'>Zum Ausgeben der dynamischen Daten, die aus der Datenbank stammen, habe ich die View-Engine <b>EJS</b> verwendet.</p><p class='project-details__desc-para'><b>EJS :</b><i> Eingebettetes JavaScript-Templating</i><br /><b> - Wie funktioniert EJS? </b><br />Die View-Dateien befinden sich auf dem Server und wir möchten eine davon über den Browser rendern. Diese View-Datei wird der EJS-View-Engine zur Verarbeitung übergeben. Die Engine sucht nach dynamischen Inhalten, Variablen, Schleifen usw.<br />Sobald diese gefunden werden, ermittelt die Engine den resultierenden HTML-Code für diese Teile. Am Ende gibt sie eine gültige HTML-Seite basierend auf der von uns geschriebenen Vorlage aus, und die HTML-Seite mit den resultierenden Daten wird an den Browser zurückgesendet. Dieser gesamte Prozess wird als <b>serverseitiges Rendering</b> bezeichnet.<br /><i>Weitere Informationen über <b>EJS</b> finden Sie <a style='color: blue' href='https://ejs.co'>hier</a>.</i></p><p class='project-details__desc-para'> <b>Datenbank :</b> <br />Ich habe <b>MongoDB</b> verwendet, um die Daten zu verwalten. Mit <b>Mongoose</b> habe ich ein Schema für die Blogs erstellt, das einfach ist und aus den folgenden Feldern besteht: <br />Titel, Snippet und Inhalt, mit einem JSON-Objekt für Zeitstempel <i>- automatisch generiert und in der Datenbank gespeichert -</i>, um Blogs nach Erstellungsdatum zu sortieren.</p><p class='project-details__desc-para'> <b>MVC :</b> <br />Der Ansatz steht für <b>Model</b>, <b>View</b>, <b>Controller</b>. Es ist eine Methode zur Strukturierung des Codes und der Dateien, um den Code modularer, wiederverwendbarer und leichter zu warten zu machen. <br /><br /><b>Modelle</b> beschreiben die Datenstruktur und werden verwendet, um mit der Datenbank zu interagieren. <br /><b>Views</b> sind HTML-Vorlagen, die der Benutzer sehen wird. <br /><b>Controller</b> sind das Bindeglied zwischen Modellen und Views. Sie verwenden Modelle, um Daten abzurufen, und übergeben diese Daten dann an eine View.<br />Die Idee hinter diesem Ansatz ist, den Code leichter zu verwalten und zu verstehen. Daher habe ich den Code in verschiedene Bereiche von Dateien aufgeteilt, und jeder Bereich von Dateien hat seine eigene Aufgabe. Die Routendatei passt eingehende Anfragen an und leitet diese Anfragen an die richtige Controller-Funktion weiter. Ein Controller kommuniziert mit dem entsprechenden Modell, um Daten in eine View zu laden. Dann rendert die View diese Daten in ihrer Vorlage, und die HTML-Seite mit den Daten wird an den Browser gesendet.</p><p class='project-details__desc-para'> <b>Authentifizierung und Validierung :</b> <br />Für die Benutzerregistrierung, Anmeldung und ordnungsgemäße Überprüfung der Dateneingabe habe ich verwendet: <br /><br /> <b>- JWT</b> <br /><i>JSON Web Token</i> ist ein offener Standard (RFC 7519), der eine kompakte und eigenständige Methode zur sicheren Übertragung von Informationen zwischen Parteien als JSON-Objekt definiert. Diese Informationen können verifiziert und vertraut werden, da sie digital signiert sind. JWTs können mit einem Geheimnis (mit dem HMAC-Algorithmus) oder einem privaten Schlüsselpaar unter Verwendung von RSA oder ECDSA signiert werden. <br /><i>Weitere Informationen über <b>JWT</b> finden Sie <a style='color: blue' href='https://jwt.io/'>hier</a>.</i><br /><br /><b>- Validator:</b> <br />Es ist ein Drittanbieter-Validierungspaket. Dieses Paket enthält Funktionen, die wir zur Validierung verschiedener Dinge verwenden können. Eine dieser Funktionen ist die Validierung einer E-Mail. Ich habe '<i>isEmail</i>' verwendet, anstatt eine eigene Funktion zur Validierung der E-Mail zu erstellen. <br /><i>Weitere Informationen über <b>Validator</b> finden Sie <a style='color: blue' href='https://www.npmjs.com/package/validator'>hier</a>.</i></p>",
    "cookbookText": "<p class='project-details__desc-para'>The Cookbook ist eine einfache Website zur Anzeige von Kochrezepten. Es war das Abschlussprojekt, das ich im Full-Stack-Entwicklungskurs an der Coding School eingereicht habe. Das Hauptziel des Projekts besteht darin, so viele der während des Kurses erlernten Fähigkeiten wie möglich anzuwenden.</p><p class='project-details__desc-para'>Ich habe dieses Projekt von Grund auf begonnen, und da ich über mehrere Tage hinweg für jeweils einige Stunden daran gearbeitet habe, habe ich über Trello Karten erstellt, um Aufgaben zu teilen und zu organisieren, um zu wissen, was im nächsten Schritt benötigt wird und was bereits erledigt ist, mit anderen Worten, um die Arbeit zu organisieren. Ich habe ein Drahtmodell (Wireframe) für das Projekt mit einigen ersten Bildern und dem Logo des Projekts erstellt und dann mit dem Programmieren begonnen. Ich habe sowohl das Frontend als auch das Backend programmiert.</p>",
    "todoJavaAppText": "<p class='project-details__desc-para'>Todo-App ist eine einfache Anwendung, die aus einem Feld zur Eingabe von Aufgaben und drei Abschnitten für jeden Fall besteht: Offen, In Bearbeitung und Erledigt. Zusätzlich gibt es eine Navigationsleiste. Eingegebene Aufgaben sind standardmäßig 'Offen'. Die Aufgabe wird im 'Offen'-Menü aufgeführt. Für jede Aufgabe gibt es drei Schaltflächen: Löschen, Bearbeiten und Weiterleiten.</p><ul class='project-details__desc-para'><li>- Löschen: um die Aufgabe zu löschen.</li><li>- Bearbeiten: um die Aufgabe zwischen den drei Listen zu verschieben.</li><li>- Weiterleiten: um die Aufgabe zur nächsten Liste weiterzuleiten.</li></ul><p class='project-details__desc-para'><strong>Ich habe die App nicht mit einer Datenbank verknüpft, daher bleiben die Einträge bestehen, bis die Sitzung beendet wird.</strong></p>",
    "todoListText": "<p class='project-details__desc-para'>Die Todo-Liste-App ist eine leichte, schnelle und einfache Anwendung, um tägliche Aufgaben auf dem Mobiltelefon über den Browser anstelle von Stift und Papier zu erfassen. Ich habe HTML und CSS verwendet, um die Anwendungsarchitektur zu erstellen, und JavaScript für die Funktionalität. Die Einträge werden im lokalen Speicher des Browsers im JSON-Format gespeichert.</p><p class='project-details__desc-para'>Die Daten bleiben auf der Seite sichtbar, solange sie nicht aus dem lokalen Speicher des Browsers gelöscht werden, entweder über die Browsereinstellungen oder über die Anwendung selbst. Es gibt eine Option, um die Aufgaben einzeln oder kollektiv zu löschen, wenn sie abgeschlossen sind. Es gibt auch eine Option zum Bearbeiten.</p>"
}
